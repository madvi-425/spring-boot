pipeline {
  agent {
    docker {
      image 'docker754/my-java-sonar-docker'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    SONAR_URL = "http://52.66.216.216:9000"
    GIT_REPO_NAME = "spring-boot"
    GIT_USER_NAME = "NappingLeader"
    GIT_REPO_PATH = "java-maven-sonar-argocd-helm-k8s"
    DOCKER_IMAGE = "docker754/demo:${BUILD_NUMBER}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: '*/main']],
          userRemoteConfigs: [[
            url: 'https://github.com/NappingLeader/spring-boot.git',
            credentialsId: 'github'
          ]]
        ])
        sh 'echo âœ… Checkout successful'
      }
    }

    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd ${GIT_REPO_PATH}/spring-boot-app && mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd ${GIT_REPO_PATH}/spring-boot-app
            mvn sonar:sonar \
              -Dsonar.login=$SONAR_AUTH_TOKEN \
              -Dsonar.host.url=$SONAR_URL
          '''
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          script {
            sh '''
              cd ${GIT_REPO_PATH}/spring-boot-app
              docker build -t ${DOCKER_IMAGE} .
            '''
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
              dockerImage.push()
            }
          }
        }
      }
    }

    stage('Update Deployment File') {
      when {
        expression { currentBuild.currentResult == 'SUCCESS' }
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "auvroneil007@gmail.com"
            git config user.name "Auvro"
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g ${GIT_REPO_PATH}/spring-boot-app-manifests/deployment.yml
            git add ${GIT_REPO_PATH}/spring-boot-app-manifests/deployment.yml
            git commit -m "Update image to version ${BUILD_NUMBER}" || echo "No changes"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }
}
